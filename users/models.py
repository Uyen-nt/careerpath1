# users/models.py
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.db import models
from django.conf import settings

class CustomUserManager(BaseUserManager):
    def create_user(self, username, email, password=None, **extra_fields):
        if not email:
            raise ValueError("Email l√† b·∫Øt bu·ªôc")
        email = self.normalize_email(email)
        user = self.model(username=username, email=email, **extra_fields)
        user.set_password(password)
        user.save()
        return user

    def create_superuser(self, username, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(username, email, password, **extra_fields)

class CustomUser(AbstractBaseUser, PermissionsMixin):
    username = models.CharField(
        max_length=150, unique=True, verbose_name="T√™n ƒëƒÉng nh·∫≠p"
    )
    email = models.EmailField(
        unique=True, verbose_name="Email"
    )
    first_name = models.CharField(
        max_length=30, blank=True, verbose_name="H·ªç"
    )
    last_name = models.CharField(
        max_length=30, blank=True, verbose_name="T√™n"
    )
    is_active = models.BooleanField(
        default=True, verbose_name="Ho·∫°t ƒë·ªông"
    )
    is_staff = models.BooleanField(
        default=False, verbose_name="Quy·ªÅn truy c·∫≠p Admin"
    )
    date_joined = models.DateTimeField(
        auto_now_add=True, verbose_name="Ng√†y tham gia"
    )
    avatar = models.ImageField(
        upload_to='avatars/', default='avatars/default_avatar.png', verbose_name="·∫¢nh ƒë·∫°i di·ªán"
    )

    is_premium = models.BooleanField(
        default=False, verbose_name="G√≥i Premium"
    )
    premium_expiry = models.DateTimeField(
        null=True, blank=True, verbose_name="H·∫øt h·∫°n Premium"
    )

    # üëá b·ªï sung 2 field n√†y
    promoted_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,  # ho·∫∑c 'self'
        null=True, blank=True,
        on_delete=models.SET_NULL,
        related_name='promoted_users',
        verbose_name='Ng∆∞·ªùi n√¢ng quy·ªÅn'
    )
    promoted_at = models.DateTimeField(
        null=True, blank=True, verbose_name='Th·ªùi ƒëi·ªÉm n√¢ng quy·ªÅn'
    )

    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = ['email']

    objects = CustomUserManager()

    class Meta:
        verbose_name = "Ng∆∞·ªùi d√πng"
        verbose_name_plural = "Qu·∫£n l√Ω User"

    def __str__(self):
        return self.username

    # users/models.py (th√™m d∆∞·ªõi class CustomUser)
class SuperUserProxy(CustomUser):
    class Meta:
        proxy = True
        app_label = "users"  # ‚úÖ B·ªï sung d√≤ng n√†y
        verbose_name = "Qu·∫£n l√Ω Admin"
        verbose_name_plural = "Qu·∫£n l√Ω Admin"

class RegularUserProxy(CustomUser):
    class Meta:
        proxy = True
        app_label = "users"
        verbose_name = "Qu·∫£n l√Ω User"
        verbose_name_plural = "Qu·∫£n l√Ω User"




